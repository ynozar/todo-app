/**
 * ToDoBackend
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { CreateToDoItemRequest } from '../model/createToDoItemRequest';
import { DeletionResponse } from '../model/deletionResponse';
import { PatchToDoItemRequest } from '../model/patchToDoItemRequest';
import { ToDoItemResponse } from '../model/toDoItemResponse';
import { UpdateToDoItemRequest } from '../model/updateToDoItemRequest';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ToDosService {

    protected basePath = '/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     *
     *
     * @param body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createToDo(body: CreateToDoItemRequest, observe?: 'body', reportProgress?: boolean): Observable<ToDoItemResponse>;
    public createToDo(body: CreateToDoItemRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ToDoItemResponse>>;
    public createToDo(body: CreateToDoItemRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ToDoItemResponse>>;
    public createToDo(body: CreateToDoItemRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createToDo.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<ToDoItemResponse>('post',`${this.basePath}/todos`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param uid
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteToDo(uid: string, observe?: 'body', reportProgress?: boolean): Observable<DeletionResponse>;
    public deleteToDo(uid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DeletionResponse>>;
    public deleteToDo(uid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DeletionResponse>>;
    public deleteToDo(uid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling deleteToDo.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<DeletionResponse>('delete',`${this.basePath}/todos/${encodeURIComponent(String(uid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param groupUid
     * @param isCompleted
     * @param priority
     * @param dueBefore
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllToDos(groupUid?: string, isCompleted?: boolean, priority?: number, dueBefore?: Date, observe?: 'body', reportProgress?: boolean): Observable<Array<ToDoItemResponse>>;
    public getAllToDos(groupUid?: string, isCompleted?: boolean, priority?: number, dueBefore?: Date, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ToDoItemResponse>>>;
    public getAllToDos(groupUid?: string, isCompleted?: boolean, priority?: number, dueBefore?: Date, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ToDoItemResponse>>>;
    public getAllToDos(groupUid?: string, isCompleted?: boolean, priority?: number, dueBefore?: Date, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (groupUid !== undefined && groupUid !== null) {
            queryParameters = queryParameters.set('groupUid', <any>groupUid);
        }
        if (isCompleted !== undefined && isCompleted !== null) {
            queryParameters = queryParameters.set('isCompleted', <any>isCompleted);
        }
        if (priority !== undefined && priority !== null) {
            queryParameters = queryParameters.set('priority', <any>priority);
        }
        if (dueBefore !== undefined && dueBefore !== null) {
            queryParameters = queryParameters.set('dueBefore', <any>dueBefore.toISOString());
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<ToDoItemResponse>>('get',`${this.basePath}/todos`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param uid
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getToDoById(uid: string, observe?: 'body', reportProgress?: boolean): Observable<ToDoItemResponse>;
    public getToDoById(uid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ToDoItemResponse>>;
    public getToDoById(uid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ToDoItemResponse>>;
    public getToDoById(uid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling getToDoById.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ToDoItemResponse>('get',`${this.basePath}/todos/${encodeURIComponent(String(uid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public patchToDo(body: PatchToDoItemRequest, observe?: 'body', reportProgress?: boolean): Observable<ToDoItemResponse>;
    public patchToDo(body: PatchToDoItemRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ToDoItemResponse>>;
    public patchToDo(body: PatchToDoItemRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ToDoItemResponse>>;
    public patchToDo(body: PatchToDoItemRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchToDo.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<ToDoItemResponse>('patch',`${this.basePath}/todos`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateToDo(body: UpdateToDoItemRequest, observe?: 'body', reportProgress?: boolean): Observable<ToDoItemResponse>;
    public updateToDo(body: UpdateToDoItemRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ToDoItemResponse>>;
    public updateToDo(body: UpdateToDoItemRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ToDoItemResponse>>;
    public updateToDo(body: UpdateToDoItemRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateToDo.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<ToDoItemResponse>('put',`${this.basePath}/todos`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
