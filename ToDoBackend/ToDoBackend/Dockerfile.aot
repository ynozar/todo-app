# Step 1: Build stage to compile the app with regular .NET SDK
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build

# Install NativeAOT prerequisites (if needed, not necessary for migration step)
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
       clang zlib1g-dev

WORKDIR /source

# Copy the source code to the build container
COPY . .

# Restore dependencies
RUN dotnet restore


# Step 2: Install the EF Core tools so we can run migrations
RUN dotnet tool install --global dotnet-ef

# Ensure the tools are in the PATH for the next steps
ENV PATH="/root/.dotnet/tools:${PATH}"

# Step 2: Apply migrations using the regular .NET SDK runtime
# This step will ensure migrations are applied before AOT compilation.
RUN dotnet ef dbcontext optimize
#RUN dotnet ef database update --configuration Release

# Step 3: Publish the application with NativeAOT
RUN dotnet publish -c Release -p:PublishAot=true -p:RuntimeIdentifier=linux-arm64 -o /app

# Step 4: Runtime stage (final image)
FROM mcr.microsoft.com/dotnet/runtime-deps:8.0 AS runtime

WORKDIR /app

# Copy the AOT-compiled application from the build stage
COPY --from=build /app .

# Set the entry point for the AOT application
ENTRYPOINT ["/app/ToDoBackend"]
